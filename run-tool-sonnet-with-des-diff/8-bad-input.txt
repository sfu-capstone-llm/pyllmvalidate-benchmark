
# Description

# PR - fix handling of comments in from imports

Fixes #671

# Issue 671 - Black produces invalid code with commented out multi-line includes

Howdy! Sorry you're having trouble. To expedite your experience,
provide some basics for me:

Operating system: MacOS
Python version: Python 3.7.1
Black version: 18.9b0
Does also happen on master: Yes

repro:

(black-repro) [schrockn@mbp ~/code/playground/black_bug_repro]$ black test.py
error: cannot format test.py: INTERNAL ERROR: Black produced invalid code: invalid syntax (<unknown>, line 11). Please report a bug on https://github.com/ambv/black/issues.  This invalid output might be helpful: /var/folders/nb/18_t4vkx595_cnpf8nz5gt_80000gn/T/blk_di3puv3v.log
All done! ðŸ’¥ ðŸ’” ðŸ’¥
1 file failed to reformat.
test file:

from .config import (
    Any,
    Bool,
    ConfigType,
    ConfigTypeAttributes,
    Int,
    Path,
    #  String,
    #  resolve_to_config_type,
    #  DEFAULT_TYPE_ATTRIBUTES,
)
The invalid output:

(black-repro) [schrockn@mbp ~/code/playground/black_bug_repro]$ more /var/folders/nb/18_t4vkx595_cnpf8nz5gt_80000gn/T/blk_di3puv3v.log
  File "/Users/schrockn/code/githubs/black/black.py", line 3318, in assert_equivalent
    dst_ast = ast.parse(dst)
  File "/Users/schrockn/.pyenv/versions/3.7.1/lib/python3.7/ast.py", line 35, in parse
    return compile(source, filename, mode, PyCF_ONLY_AST)
from .config import (
    Any,
    Bool,
    ConfigType,
    ConfigTypeAttributes,
    Int,
    Path,
    #  String,
    #  resolve_to_config_type,
    #  DEFAULT_TYPE_ATTRIBUTES,
    ,
)
Thanks!

# Diff

diff --git a/black.py b/black.py
index dd6e372..9ecfbe1 100644
--- a/black.py
+++ b/black.py
@@ -2405,10 +2405,17 @@ def bracket_split_build_line(
         if leaves:
             # Since body is a new indent level, remove spurious leading whitespace.
             normalize_prefix(leaves[0], inside_brackets=True)
-            # Ensure a trailing comma when expected.
+            # Ensure a trailing comma for imports, but be careful not to add one after
+            # any comments.
             if original.is_import:
-                if leaves[-1].type != token.COMMA:
-                    leaves.append(Leaf(token.COMMA, ","))
+                for i in range(len(leaves) - 1, -1, -1):
+                    if leaves[i].type == token.COMMA:
+                        break
+                    elif leaves[i].type == STANDALONE_COMMENT:
+                        continue
+                    else:
+                        leaves.insert(i + 1, Leaf(token.COMMA, ","))
+                        break
     # Populate the line
     for leaf in leaves:
         result.append(leaf, preformatted=True)

