diff --git a/black.py b/black.py
index 7682f7c..7e39c92 100644
--- a/black.py
+++ b/black.py
@@ -29,7 +29,6 @@ from typing import (
     Sequence,
     Set,
     Tuple,
-    Type,
     TypeVar,
     Union,
     cast,
@@ -90,34 +89,6 @@ class CannotSplit(Exception):
     """
 
 
-class FormatError(Exception):
-    """Base exception for `# fmt: on` and `# fmt: off` handling.
-
-    It holds the number of bytes of the prefix consumed before the format
-    control comment appeared.
-    """
-
-    def __init__(self, consumed: int) -> None:
-        super().__init__(consumed)
-        self.consumed = consumed
-
-    def trim_prefix(self, leaf: Leaf) -> None:
-        leaf.prefix = leaf.prefix[self.consumed :]
-
-    def leaf_from_consumed(self, leaf: Leaf) -> Leaf:
-        """Returns a new Leaf from the consumed part of the prefix."""
-        unformatted_prefix = leaf.prefix[: self.consumed]
-        return Leaf(token.NEWLINE, unformatted_prefix)
-
@@ -2781,10 +2664,6 @@ def hide_fmt_off(node: Node) -> bool:
     if not ignored_nodes:
         return
 
-    # The first node can be a container of the leaf. In this case, we will
-    # process all nodes between here and the next FMT_OFF.
+    for node in ignored_nodes:
         if node.type == token.ENDMARKER:
             break
         yield node
 
@@ -2816,7 +2695,7 @@ def hide_fmt_off(node: Node) -> bool:
     return True
 
 
-def convert_one_fmt_on_pair(leaf: Leaf) -> bool:
+def convert_one_fmt_off_pair(leaf: Leaf) -> bool:
     """Convert content of a single `# fmt: off`/`# fmt: on` into a standalone comment.
 
+    Returns True if a pair was converted.
-    Raises :exc:`SyntaxError` if no matching `# fmt: off` is found for a `# fmt: on`."""
     try_again = True
     while try_again:
         try_again = hide_fmt_off(leaf)